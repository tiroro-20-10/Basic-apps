# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'notnotepad.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import ctypes
import os
import sys
from PyQt5 import QtCore, QtGui, QtWidgets, QtPrintSupport, QtWinExtras


# F.F
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(285, 103)
        Dialog.setMinimumSize(QtCore.QSize(285, 103))
        Dialog.setMaximumSize(QtCore.QSize(285, 103))
        Dialog.setModal(True)
        Dialog.setWindowFlags(QtCore.Qt.WindowTitleHint | QtCore.Qt.WindowCloseButtonHint)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(120, 70, 156, 23))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel | QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.filenameEdit = QtWidgets.QLineEdit(Dialog)
        self.filenameEdit.setGeometry(QtCore.QRect(10, 20, 271, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.filenameEdit.sizePolicy().hasHeightForWidth())
        self.filenameEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.filenameEdit.setFont(font)
        self.filenameEdit.setObjectName("filenameEdit")

        self.retranslateUi(Dialog)
        self.buttonBox.accepted.connect(Dialog.accept)  # type: ignore
        self.buttonBox.rejected.connect(Dialog.reject)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", 'If there is no saving to a file in the "Print" dialog'))
        self.filenameEdit.setPlaceholderText(_translate("Dialog", 'Type a Filename... (To PDFâ‡’Filename.pdf)'))


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(343, 361)
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.filenamelabel = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.filenamelabel.setFont(font)
        self.filenamelabel.setAlignment(QtCore.Qt.AlignCenter)
        self.filenamelabel.setObjectName("filenamelabel")
        self.verticalLayout.addWidget(self.filenamelabel)
        self.openButton = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.openButton.sizePolicy().hasHeightForWidth())
        self.openButton.setSizePolicy(sizePolicy)
        self.openButton.setObjectName("openButton")
        self.verticalLayout.addWidget(self.openButton)
        self.fontButton = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fontButton.sizePolicy().hasHeightForWidth())
        self.fontButton.setSizePolicy(sizePolicy)
        self.fontButton.setObjectName("fontButton")
        self.verticalLayout.addWidget(self.fontButton)
        self.previewButton = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.previewButton.sizePolicy().hasHeightForWidth())
        self.previewButton.setSizePolicy(sizePolicy)
        self.previewButton.setObjectName("previewButton")
        self.verticalLayout.addWidget(self.previewButton)
        self.printtopdfButton = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.printtopdfButton.sizePolicy().hasHeightForWidth())
        self.printtopdfButton.setSizePolicy(sizePolicy)
        self.printtopdfButton.setObjectName("printtopdfButton")
        self.verticalLayout.addWidget(self.printtopdfButton)
        self.colorButton = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.colorButton.sizePolicy().hasHeightForWidth())
        self.colorButton.setSizePolicy(sizePolicy)
        self.colorButton.setObjectName("colorButton")
        self.verticalLayout.addWidget(self.colorButton)


        self.printer = QtPrintSupport.QPrinter()
        self.filename_out = ""
        self.text_font = None
        self.filepath = ""
        self.filename_print = ""
        self.file = None
        self.item_name = ""
        # self.item_item = None
        # self.imagepath = ""
        self.window_color = ""

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.tlist = QtWinExtras.QWinJumpList(Form)
        self.tlist.setIdentifier(myappid)
        self.tlist_clear_sh = QtWidgets.QShortcut("Ctrl+Shift+C", Form)
        self.tlist_clear_sh.activated.connect(self.tlist.clear)

        self.fontButton.setEnabled(False)
        self.previewButton.setEnabled(False)
        self.printtopdfButton.setEnabled(False)

        self.openButton.clicked.connect(self.open_file)
        self.fontButton.clicked.connect(self.font_text)
        self.previewButton.clicked.connect(self.preview_text)
        self.printtopdfButton.clicked.connect(self.print_to_pdf)
        self.colorButton.clicked.connect(self.color)

        self.top = QtCore.QPoint(10, 10)
        self.bottom = QtCore.QPoint(self.printer.width() - 10, self.printer.height() - 10)

        if len(sys.argv) == 8:
            self.filepath = sys.argv[1]
            self.text_font = QtGui.QFont(sys.argv[2], int(sys.argv[3]), int(sys.argv[4]), bool(sys.argv[5]))
            self.filename_print = sys.argv[6]
            self.filenamelabel.setText(self.filename_print)
            # self.item_name = sys.argv[7]
            self.imagepath = sys.argv[7]
            self.fontButton.setEnabled(True)
            self.previewButton.setEnabled(True)
            self.printtopdfButton.setEnabled(True)
            # os.chdir("D:/PyCharm/grinterere")
            # os.chdir(self.imagepath)

    def color(self):
        d = QtWidgets.QColorDialog(Form)
        d.exec()
        self.window_color = d.currentColor().name()
        Form.setStyleSheet(f"color: {self.window_color};")
        #Form.setStyleSheet(f"color: {d.currentColor().name()};")

    def filename_input(self):
        Dialog = QtWidgets.QDialog()
        ui2 = Ui_Dialog()
        ui2.setupUi(Dialog)
        Dialog.move(Form.geometry().center() - Dialog.rect().center() - QtCore.QPoint(0, 35))
        Dialog.show()
        result = Dialog.exec()
        if result == 1:
            self.filename_out = ui2.filenameEdit.text()
            if self.filename_out:
                self.print_text()

    def open_file(self):
        self.fontButton.setEnabled(False)
        self.previewButton.setEnabled(False)
        self.printtopdfButton.setEnabled(False)
        self.filenamelabel.setText("Filename")
        self.file = QtWidgets.QFileDialog.getOpenFileUrl(Form, "Select text file",
                                                         QtCore.QUrl.fromLocalFile("."),
                                                         "TXT (*.txt);;ALL (*.*)")
        self.filename_print = self.file[0].fileName()
        self.filepath = self.file[0].path()[1:].replace("/", "\\")
        # self.imagepath = os.path.abspath("printer.png")[:-12].replace("\\", "/")
        # print(self.imagepath)

        # self.printer.setOutputFileName(self.filepath)
        if self.filename_print:
            if len(self.filename_print) >= 59:
                self.filenamelabel.setText(self.filename_print[:59] + "...")
            elif len(self.filename_print) < 59:
                self.filenamelabel.setText(self.filename_print)
            else:
                print(":?")
            self.fontButton.setEnabled(True)

            item = QtWinExtras.QWinJumpListItem(QtWinExtras.QWinJumpListItem.Type.Link)
            # program_name = r"C:\Windows\notepad.exe"
            item.setTitle("NoTePaD " + self.filename_print)
            # item.setFilePath(program_name)
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("./notepad.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            Form.setWindowIcon(icon1)
            item.setArguments([self.file[0].path()[1:]])
            self.tlist.recent().addItem(item)
            self.tlist.recent().setVisible(True)

    def font_text(self):
        (self.text_font, ok) = QtWidgets.QFontDialog.getFont(Form)
        if ok:
            self.filenamelabel.setFont(self.text_font)
            self.openButton.setFont(self.text_font)
            self.fontButton.setFont(self.text_font)
            self.previewButton.setFont(self.text_font)
            self.printtopdfButton.setFont(self.text_font)
            self.colorButton.setFont(self.text_font)

            font_str = self.text_font.family()
            font_size = str(self.text_font.pointSize())
            font_weight = str(self.text_font.weight())
            font_italic = str(self.text_font.italic())
            tlist_items = self.tlist.recent().items()

            if len(tlist_items) > 10:
                for i in range(0, len(tlist_items)):
                    self.tlist.recent().items().pop(i)
                    if len(self.tlist.recent().items()) == 9:
                        break

            tlist_items = self.tlist.recent().items()
            name = os.path.basename(self.filepath)
            item = QtWinExtras.QWinJumpListItem(QtWinExtras.QWinJumpListItem.Type.Link)
            item.setTitle(name + ' ' + '1')
            if tlist_items:
                for i in range(1, len(tlist_items) + 1):
                    tlist_name = self.tlist.recent().items()[-i].title().split(' ')[0]
                    if tlist_name == name:
                        tlist_name_number = self.tlist.recent().items()[-i].title().split(' ')[1]
                        item.setTitle(name + ' ' + str(int(tlist_name_number) + 1))
                        break

            #item.setFilePath(r"D:\PyCharm\grinterere\venv\Scripts\pythonw.exe")
            #item.setFilePath(r"C:\Users\Anton\PycharmProjects\lesson38\venv\Scripts\pythonw.exe")
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("./printer.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            Form.setWindowIcon(icon1)
            item.setArguments([sys.argv[0], self.filepath, font_str, font_size, font_weight, font_italic, self.filename_print])
            self.tlist.recent().addItem(item)
            self.tlist.recent().setVisible(True)
            self.previewButton.setEnabled(True)
            self.printtopdfButton.setEnabled(True)

    def preview_text(self):
        d = QtPrintSupport.QPrintPreviewDialog(self.printer, Form)
        d.paintRequested.connect(self.print_text)
        d.exec()

    def print_to_pdf(self):
        d = QtPrintSupport.QPrintDialog(self.printer, Form)
        if d.exec() == QtWidgets.QDialog.DialogCode.Accepted:
            self.print_text()
        else:
            self.filename_input()

    def get_line_rect(self, painter: QtGui.QPainter, current_height, line):
        point = QtCore.QPoint(self.top)
        point.setY(point.y() + current_height)

        return painter.boundingRect(point.x(), point.y(), self.bottom.x(), self.bottom.y(),
                                    QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignTop | QtCore.Qt.TextWordWrap,
                                    line)

    def print_line(self, painter: QtGui.QPainter, rect, line):
        # :), not :/, :)
        # pen = painter.pen()
        # painter.setPen(QtGui.QPen(QtCore.Qt.green, 1))
        # painter.drawRect(rect)
        # painter.setPen(pen)
        painter.drawText(rect.x(), rect.y(), rect.width(), rect.height(),
                         QtCore.Qt.TextWordWrap | QtCore.Qt.TextWrapAnywhere, line)

    def print_text(self):
        try:
            with open(self.filepath) as f:
                self.printer.setOutputFileName(self.filename_out)
                if not os.path.exists(self.filepath):
                    QtWidgets.QMessageBox.warning(Form, " No SuCh FiLe!",
                                                  f"No sUch File '{self.filepath}'")
                    return 1

                current_height = 0

                painter = QtGui.QPainter()
                painter.begin(self.printer)
                painter.setFont(self.text_font)
                for line in f:
                    line = line[:-1] + " "
                    line_rect = self.get_line_rect(painter, current_height, line)
                    if current_height + line_rect.height() > self.bottom.y():
                        self.printer.newPage()
                        current_height = 0
                        # :9 69 6(
                        line_rect = self.get_line_rect(painter, current_height, line)
                    self.print_line(painter, line_rect, line)
                    current_height += line_rect.height()
                painter.end()
                QtWidgets.QMessageBox.information(Form, "DoNe1",
                                                  "Your job is complete1")
        except Exception:
            QtWidgets.QMessageBox.critical(Form, "ErRor", "The fIle DoEs noT CONtain tExR111")
            QtWidgets.QMessageBox.critical(Form, "ErRor", "The fIle DoEs noT CONtain tExR111")
            QtWidgets.QMessageBox.critical(Form, "ErRor", "The fIle DoEs noT CONtain tExR111")
            QtWidgets.QMessageBox.critical(Form, "ErRor", "The fIle DoEs noT CONtain tExR111")
            sys.exit(1)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "WNotnotepad"))
        self.filenamelabel.setText(_translate("Form", "Filename"))
        self.openButton.setText(_translate("Form", "Open filE"))
        self.fontButton.setText(_translate("Form", "FonT"))
        self.previewButton.setText(_translate("Form", "PrevieW"))
        self.printtopdfButton.setText(_translate("Form", "PrINt to PDF"))
        self.colorButton.setText(_translate("Form", "COloR wINdOw"))

class MyW(QtWidgets.QWidget, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def closeEvent(self, e: QtGui.QCloseEvent):
        settings.beginGroup("NOTtlist")
        settings.beginGroup("window")
        if self.text_font:
            settings.setValue("Font", self.text_font)
        settings.setValue("Color", self.window_color)
        settings.endGroup()
        settings.endGroup()
        settings.sync()
        e.accept()


if __name__ == "__main__":
    font_key = "NOTtlist/window/Font"
    color_key = "NOTtlist/window/Color"

    myappid = 'futurecode.ui.print.1'
    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)

    app = QtWidgets.QApplication([])

    Form = MyW()
    # ui = Ui_Form()
    # ui.setupUi(Form)

    settings = QtCore.QSettings("not_settings_F.ini", QtCore.QSettings.Format.IniFormat)

    if settings.contains(font_key):
        Form.text_font = settings.value(font_key)
        Form.openButton.setFont(Form.text_font)
        Form.fontButton.setFont(Form.text_font)
        Form.previewButton.setFont(Form.text_font)
        Form.printtopdfButton.setFont(Form.text_font)
        Form.filenamelabel.setFont(Form.text_font)
        Form.colorButton.setFont(Form.text_font)

    if settings.contains(color_key):
        Form.setStyleSheet(f"color: {settings.value(color_key)}")
        Form.window_color = settings.value(color_key)

    Form.show()

    settings.clear()
    settings.sync()

    app.exec()
