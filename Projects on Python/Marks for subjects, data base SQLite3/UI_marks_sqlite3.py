# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'marks.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sqlite3, sys
from PyQt5 import QtCore, QtGui, QtWidgets, QtSql

filename = ''
range_from = None
range_to = None
floating_point_numbers = False
show_table = False
tableView = None
save_update_table = True

class FUi_Form(QtWidgets.QWidget):
    def closeEvent(self, e: QtGui.QCloseEvent):
        if filename:
            result = QtWidgets.QMessageBox.question(Form, "Start?", "Are you sure about what you entered?",
                                                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.Cancel)
            if result == QtWidgets.QMessageBox.Cancel:
                e.ignore()
            else:
                e.accept()


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(484, 228)
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.filenameEdit = QtWidgets.QLineEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.filenameEdit.sizePolicy().hasHeightForWidth())
        self.filenameEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.filenameEdit.setFont(font)
        self.filenameEdit.setObjectName("filenameEdit")
        self.verticalLayout.addWidget(self.filenameEdit)
        self.label = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.range_from_nat_spinBox = QtWidgets.QSpinBox(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.range_from_nat_spinBox.sizePolicy().hasHeightForWidth())
        self.range_from_nat_spinBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.range_from_nat_spinBox.setFont(font)
        self.range_from_nat_spinBox.setMaximum(999999999)
        self.range_from_nat_spinBox.setProperty("value", 1)
        self.range_from_nat_spinBox.setObjectName("range_from_nat_spinBox")
        self.horizontalLayout.addWidget(self.range_from_nat_spinBox)
        self.range_to_nat_spinBox = QtWidgets.QSpinBox(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.range_to_nat_spinBox.sizePolicy().hasHeightForWidth())
        self.range_to_nat_spinBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.range_to_nat_spinBox.setFont(font)
        self.range_to_nat_spinBox.setSuffix("")
        self.range_to_nat_spinBox.setMaximum(999999999)
        self.range_to_nat_spinBox.setProperty("value", 5)
        self.range_to_nat_spinBox.setObjectName("range_to_nat_spinBox")
        self.horizontalLayout.addWidget(self.range_to_nat_spinBox)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.range_from_float_spinBox = QtWidgets.QDoubleSpinBox(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.range_from_float_spinBox.sizePolicy().hasHeightForWidth())
        self.range_from_float_spinBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.range_from_float_spinBox.setFont(font)
        self.range_from_float_spinBox.setDecimals(2)
        self.range_from_float_spinBox.setMaximum(1e+100)
        self.range_from_float_spinBox.setObjectName("range_from_float_spinBox")
        self.horizontalLayout_2.addWidget(self.range_from_float_spinBox)
        self.range_to_float_spinBox = QtWidgets.QDoubleSpinBox(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.range_to_float_spinBox.sizePolicy().hasHeightForWidth())
        self.range_to_float_spinBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.range_to_float_spinBox.setFont(font)
        self.range_to_float_spinBox.setMaximum(1e+100)
        self.range_to_float_spinBox.setProperty("value", 1.0)
        self.range_to_float_spinBox.setObjectName("range_to_float_spinBox")
        self.horizontalLayout_2.addWidget(self.range_to_float_spinBox)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.splitter_3 = QtWidgets.QSplitter(Form)
        self.splitter_3.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_3.setObjectName("splitter_3")
        self.splitter_2 = QtWidgets.QSplitter(self.splitter_3)
        self.splitter_2.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_2.setObjectName("splitter_2")
        self.splitter = QtWidgets.QSplitter(self.splitter_2)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.naturalButton = QtWidgets.QRadioButton(self.splitter)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(13)
        self.naturalButton.setFont(font)
        self.naturalButton.setChecked(True)
        self.naturalButton.setAutoExclusive(True)
        self.naturalButton.setObjectName("naturalButton")
        self.floatButton = QtWidgets.QRadioButton(self.splitter)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(13)
        self.floatButton.setFont(font)
        self.floatButton.setAutoExclusive(True)
        self.floatButton.setObjectName("floatButton")
        self.save_updateBox = QtWidgets.QCheckBox(self.splitter_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(13)
        self.save_updateBox.setFont(font)
        self.save_updateBox.setChecked(True)
        self.save_updateBox.setObjectName("save_updateBox")
        self.okButton = QtWidgets.QPushButton(self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.okButton.sizePolicy().hasHeightForWidth())
        self.okButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.okButton.setFont(font)
        self.okButton.setObjectName("okButton")
        self.verticalLayout.addWidget(self.splitter_3)

        self.retranslateUi(Form)
        self.floatButton.clicked.connect(self.range_from_float_spinBox.show)  # type: ignore
        self.floatButton.clicked.connect(self.range_to_float_spinBox.show)  # type: ignore
        self.floatButton.clicked.connect(self.range_from_nat_spinBox.hide)  # type: ignore
        self.floatButton.clicked.connect(self.range_to_nat_spinBox.hide)  # type: ignore
        self.naturalButton.clicked.connect(self.range_from_float_spinBox.hide)  # type: ignore
        self.naturalButton.clicked.connect(self.range_to_float_spinBox.hide)  # type: ignore
        self.naturalButton.clicked.connect(self.range_from_nat_spinBox.show)  # type: ignore
        self.naturalButton.clicked.connect(self.range_to_nat_spinBox.show)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.range_from_float_spinBox.hide()
        self.range_to_float_spinBox.hide()
        self.okButton.clicked.connect(self.ok_settings)

    def ok_settings(self):
        global filename
        global range_from
        global range_to
        global floating_point_numbers
        global save_update_table

        filename_t = self.filenameEdit.text()
        natural = self.naturalButton.isChecked()
        save_update_table = self.save_updateBox.isChecked()

        if filename_t:
            filename = filename_t
            if natural:
                range_from = self.range_from_nat_spinBox.value()
                range_to = self.range_to_nat_spinBox.value()
                floating_point_numbers = False
                if range_from >= range_to:
                    QtWidgets.QMessageBox.critical(Form, "Start", '"To" must be bigger than "From"!!!')
                    filename = ''
            elif not natural:
                range_from = self.range_from_float_spinBox.value()
                range_to = self.range_to_float_spinBox.value()
                floating_point_numbers = True
                if range_from >= range_to:
                    QtWidgets.QMessageBox.critical(Form, "Start", '"To" must be bigger than "From"!!!')
                    filename = ''
            else:
                QtWidgets.QMessageBox.critical(Form, ":/", "Error!\nNaturalButton is True and NaturalButton is not True...")
        else:
            QtWidgets.QMessageBox.critical(Form, "Start", "Enter a filename...")
        if filename:
            Form.close()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Start"))
        self.filenameEdit.setPlaceholderText(_translate("Form", "Type a filename... (\'Roman.db\')"))
        self.label.setText(_translate("Form", "Enter a range of marks:"))
        self.range_from_nat_spinBox.setPrefix(_translate("Form", "From "))
        self.range_to_nat_spinBox.setPrefix(_translate("Form", "To "))
        self.range_from_float_spinBox.setPrefix(_translate("Form", "From "))
        self.range_to_float_spinBox.setPrefix(_translate("Form", "To "))
        self.naturalButton.setText(_translate("Form", "Natural numbers"))
        self.floatButton.setText(_translate("Form", "Floating-point numbers"))
        self.save_updateBox.setText(_translate("Form", "Save = Update table"))
        self.okButton.setText(_translate("Form", "OK"))


class Ui_MainWindow(object):
    def query_all(self):
        global show_table
        global tableView
        # for id, subject, mark in cur.execute(f"SELECT * FROM {filename[:-3]};").fetchall():
        #     print("ID = " + str(id) + ", subject = " + subject + ", mark = " + str(mark))
        if show_table:
            tableView.close()

        db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db.setDatabaseName(filename)
        if not db.open():
            sys.exit(-1)

        tableModel = QtSql.QSqlTableModel(self.frame)
        tableModel.setTable(filename[:-3])
        tableModel.setEditStrategy(QtSql.QSqlTableModel.OnFieldChange)
        tableModel.select()
        tableModel.setHeaderData(0, QtCore.Qt.Horizontal, "ID")
        tableModel.setHeaderData(1, QtCore.Qt.Horizontal, "Subject")
        tableModel.setHeaderData(2, QtCore.Qt.Horizontal, "Mark")

        tableView = QtWidgets.QTableView(self.frame)
        tableView.setModel(tableModel)
        tableView.resizeColumnsToContents()
        show_table = True

        self.splitter_2.addWidget(tableView)

    def save_entry(self):
        global range_from
        global range_to
        global floating_point_numbers
        global save_update_table

        curr = conn.cursor()
        subject = self.subjectEdit.text()
        mark = self.markEdit.text()
        if floating_point_numbers:
            mark = self.floatSpinBox.value()

        def other():
            if range_from <= mark <= range_to:
                try:
                    curr.execute(f"""INSERT INTO
                                {filename[:-3]}(subject, mark)
                            VALUES
                                (?, ?)
                            """, (subject, mark))
                    conn.commit()
                    QtWidgets.QMessageBox.information(MainWindow, "Your mark",
                                                      "Successfully!!!")
                    if save_update_table:
                        self.query_all()
                except:
                    QtWidgets.QMessageBox.critical(MainWindow, ":?", "Error!\n(May be with connect to db)")
            else:
                QtWidgets.QMessageBox.critical(MainWindow, "Your mark",
                                               f"Failed: mark must be in the range from {range_from} to {range_to}!!!")

        if subject and mark or subject and mark == 0:
            if not floating_point_numbers and mark.isnumeric():
                mark = int(mark)
                other()
            elif floating_point_numbers:
                other()
            else:
                if not floating_point_numbers:
                    QtWidgets.QMessageBox.critical(MainWindow, "Your mark",
                                                   "Failed: mark must be natural number!!!")
                else:
                    print(':?')
        elif not subject or not mark:
            QtWidgets.QMessageBox.critical(MainWindow, "Your mark",
                                           "Failed: subject or mark not entered!!!")
        else:
            print(':/')

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(418, 210)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.splitter_2 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_2.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_2.setObjectName("splitter_2")
        self.widget = QtWidgets.QWidget(self.splitter_2)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.subjectEdit = QtWidgets.QLineEdit(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subjectEdit.sizePolicy().hasHeightForWidth())
        self.subjectEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.subjectEdit.setFont(font)
        self.subjectEdit.setObjectName("subjectEdit")
        self.verticalLayout.addWidget(self.subjectEdit)
        self.floatSpinBox = QtWidgets.QDoubleSpinBox(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.floatSpinBox.sizePolicy().hasHeightForWidth())
        self.floatSpinBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Cambria")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.floatSpinBox.setFont(font)
        self.floatSpinBox.setMaximum(1e+54)
        self.floatSpinBox.setObjectName("floatSpinBox")
        self.verticalLayout.addWidget(self.floatSpinBox)
        self.markEdit = QtWidgets.QLineEdit(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.markEdit.sizePolicy().hasHeightForWidth())
        self.markEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.markEdit.setFont(font)
        self.markEdit.setObjectName("markEdit")
        self.verticalLayout.addWidget(self.markEdit)
        self.splitter = QtWidgets.QSplitter(self.widget)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.saveButton = QtWidgets.QPushButton(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.saveButton.sizePolicy().hasHeightForWidth())
        self.saveButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.saveButton.setFont(font)
        self.saveButton.setObjectName("saveButton")
        self.showButton = QtWidgets.QPushButton(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.showButton.sizePolicy().hasHeightForWidth())
        self.showButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.showButton.setFont(font)
        self.showButton.setObjectName("showButton")
        self.verticalLayout.addWidget(self.splitter)
        self.frame = QtWidgets.QFrame(self.splitter_2)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout.addWidget(self.splitter_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 418, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.tableWidget = QtWidgets.QTableView(self.frame)

        self.tableWidget.setObjectName("tableWidget")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.saveButton.clicked.connect(self.save_entry)
        self.showButton.clicked.connect(self.query_all)

        self.quit_sh = QtWidgets.QShortcut(QtGui.QKeySequence("Ctrl+Q"), MainWindow)
        self.quit_sh.activated.connect(MainWindow.close)

        self.saveButton_sh = QtWidgets.QShortcut(QtGui.QKeySequence("Return"), MainWindow)
        self.saveButton_sh.activated.connect(self.saveButton.click)
        self.saveButton_sh = QtWidgets.QShortcut(QtGui.QKeySequence("Enter"), MainWindow)
        self.saveButton_sh.activated.connect(self.saveButton.click)

        self.showButton_sh = QtWidgets.QShortcut(QtGui.QKeySequence("Ctrl+S"), MainWindow)
        self.showButton_sh.activated.connect(self.showButton.click)

        self.frame.hide()
        if not floating_point_numbers:
            self.floatSpinBox.hide()
        if floating_point_numbers:
            self.markEdit.hide()
            self.floatSpinBox.setMinimum(range_from)
            self.floatSpinBox.setMaximum(range_to)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MarkWindow"))
        self.subjectEdit.setPlaceholderText(_translate("MainWindow", "Type a subject..."))
        self.markEdit.setPlaceholderText(_translate("MainWindow", "Type a mark..."))
        self.saveButton.setText(_translate("MainWindow", "SAvE"))
        self.showButton.setText(_translate("MainWindow", "SHoW ALL"))


if __name__ == "__main__":
    app = QtWidgets.QApplication([])

    Form = FUi_Form()

    ui = Ui_Form()
    ui.setupUi(Form)

    Form.show()

    app.exec_()

    if filename:
        conn = sqlite3.connect(filename)
        cur = conn.cursor()

        cur.execute(f"""CREATE TABLE IF NOT EXISTS {filename[:-3]}(
            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            subject TEXT NOT NULL,
            mark BLOB NOT NULL
        );""")
        conn.commit()

        app_1 = QtWidgets.QApplication([])

        MainWindow = QtWidgets.QMainWindow()

        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)

        MainWindow.show()

        app_1.exec_()
